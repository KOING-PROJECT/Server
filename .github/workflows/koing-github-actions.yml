# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: KOING_CI/CD

on:
  push:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
#    - name: Build with Gradle
#      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
#      with:
#        arguments: build

    ## gradle caching - 빌드 시간 향상
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
        
    ## create application.yml
    - name: make application.yml
      if: contains(github.ref, 'master')
      run: |
        cd ./src/main/resources
        touch ./application.yml
        echo "${{ secrets.KOING_APPLICATION }}" > ./application.yml
      shell: bash

    ## gradle build
    - name: Build with Gradle
      run: |
        chmod +x ./gradlew
        ./gradlew build -x test

    ## docker build & push to production
    - name: Docker build & push to prod
      if: contains(github.ref, 'master')
      run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/koing .
          docker push ${{ secrets.DOCKER_USERNAME }}/koing

    ###### 기본 배포
#    ## deploy
#    - name: Deploy
#      uses: appleboy/ssh-action@master
#      id: deploy
#      if: contains(github.ref, 'master')
#      with:
#          host: ${{ secrets.KOING_HOST }}
#          username: ec2-user
#          key: ${{ secrets.KOING_PRIVATE_KEY }}
#          envs: GITHUB_SHA
#          script: |
#              sudo docker rm -f $(docker ps -qa)
#              sudo docker ps
#              sudo docker pull ${{ secrets.DOCKER_USERNAME }}/koing
#              # docker-compose up -d
#              sudo docker run -d --name koing -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/koing
#              sudo docker image prune -f


    ##### 무중단 배포
    ## deploy.sh 파일 서버로 전달하기(복사 후 붙여넣기)
    - name: Send deploy.sh
      uses: appleboy/scp-action@master
      with:
        username: ec2-user
        host: ${{ secrets.KOING_HOST }}
        key: ${{ secrets.KOING_PRIVATE_KEY }}
        port: 22
        source: "./script/deploy.sh"
        target: "/home/ec2-user/"

    ## 도커 허브에서 jar파일 및 pull후에 컴포즈 up
    - name: Deploy to Dev
      uses: appleboy/ssh-action@master
      with:
        username: ec2-user
        host: ${{ secrets.KOING_HOST }}
        key: ${{ secrets.KOING_PRIVATE_KEY }}
        script: |
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/koing
          chmod 777 ./script/deploy.sh
          ./script/deploy.sh
          docker image prune -f

  # ## time
  # current-time:
  #   needs: KOING_CI/CD
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Get Current Time
  #       uses: 1466587594/get-current-time@v2
  #       id: current-time
  #       with:
  #         format: YYYY-MM-DDTHH:mm:ss
  #         utcOffset: "+09:00" # 기준이 UTC이기 때문에 한국시간인 KST를 맞추기 위해 +9시간 추가

  #     - name: Print Current Time
  #       run: echo "Current Time=${{steps.current-time.outputs.formattedTime}}" # current-time 에서 지정한 포맷대로 현재 시간 출력
  #       shell: bash

    ## slack 알람 발송
    - name: Slack 알람 발송
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: general
        SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
        SLACK_ICON: https://github.com/rtCamp.png?size=48
        SLACK_MESSAGE: 배포 결과 => ${{ job.status }}
        SLACK_TITLE: 배포 결과 알람
        SLACK_USERNAME: Notification-Bot
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
      # 이 구문을 추가해야 빌드 성공 실패와 상관없이 동작합니다.
      if: always()
